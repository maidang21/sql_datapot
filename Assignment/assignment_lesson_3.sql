/*Task 1: Generate invoice reports 

Adventure Works Cycles sells directly to retailers, who must be invoiced for their orders. You have been tasked with writing a query 
to generate a list of invoices to be sent to customers. 

1.1 Retrieve customer orders 
As an initial step towards generating the invoice report, write a query that returns the company name from the SalesLT.Customer table, 
and the sales order ID and total due from the SalesLT.SalesOrderHeader table. */

SELECT TOP 5 * FROM SalesLT.SalesOrderHeader
SELECT TOP 5 * FROM SalesLT.Customer

SELECT 
    cus.CustomerID
    , CompanyName
    , SalesOrderID
    , TotalDue
FROM SalesLT.SalesOrderHeader AS header
LEFT JOIN SalesLT.Customer AS  cus
ON header.CustomerID = cus.CustomerID
-- WHERE SalesOrderID IS NOT NULL

/*1.2 Retrieve customer orders with addresses 
Extend your customer orders query to include the Main Office address for each customer, including the full street address, city, state or province, 
postal code, and country or region 
Tip: Note that each customer can have multiple addressees in the SalesLT.Address table, so the database developer has created 
the SalesLT.CustomerAddress table to enable a many-to-many relationship between customers and addresses. 
Your query will need to include both of these tables, and should filter the results so that only Main Office addresses are included. */

SELECT TOP 5 * FROM SalesLT.Address -- chỉ chứa thông tin chi tiết về address, không có info về order hay customer
SELECT TOP 5 * FROM SalesLT.CustomerAddress -- Có customerID
-- solve:
-- b1:  xuất phát từ bảng SalesOrderHeader --> lấy ra 1 list customerID có đặt hàng
-- b2: JOIN vói bảng CustomerAddress để lấy AddresID 
-- b3: JOIN với bảng Address để lấy những thông tin còn lại:province, state, city, postalcode

SELECT 
    header.CustomerID
    , SalesOrderID
    , AddressLine1
    , ISNULL(AddressLine2, '') AS AddressLine2
    , City
    , StateProvince
    , PostalCode
    , CountryRegion
    , header.TotalDue
    , AddressType
FROM SalesLT.SalesOrderHeader AS header
LEFT JOIN SalesLT.CustomerAddress AS cus_adress
    ON header.CustomerID = cus_adress.CustomerID 
LEFT JOIN SalesLT.Address AS addre
    ON cus_adress.AddressID = addre.AddressID
WHERE AddressType = 'Main Office'



/*Task 2: Retrieve customer data 

As you continue to work with the Adventure Works customer, product and sales data, you must create queries for reports that have been requested by the sales team. 

2.1 Retrieve a list of customers with no address 
A sales employee has noticed that Adventure Works does not have address information for all customers. You must write a query that returns a list of 
customer IDs, company names, contact names (first name and last name), and phone numbers for customers with no address stored in the database. */

SELECT TOP 5 * FROM SalesLT.Customer
SELECT TOP 5 * FROM SalesLT.CustomerAddress

SELECT DISTINCT
   cus.CustomerID
    , CompanyName
    , FirstName
    , LastName
    , Phone
FROM 
    SalesLT.Customer AS cus
LEFT JOIN SalesLT.CustomerAddress AS addres
ON cus.CustomerID = addres.CustomerID
WHERE AddressID IS NULL
-- rows: 440


/*2.2 Retrieve a list of products 
○ A sales manager needs a list of ordered product with more information.  
You must write a query that returns a list of product name (is generated by the string preceded by the '-' character (example: HL Road Frame)), 
only started selling in 2006, Product model name contains "Road" and CategoryName contains "Bikes" and  ListPrice value with integer part equal to 2243 */

-- solve: 
-- b1: quan sát các tables chúa các thông tin cần tìm
SELECT TOP 5 * FROM SalesLT.SalesOrderDetail
SELECT TOP 5 * FROM SalesLT.Product
SELECT TOP 5 * FROM SalesLT.ProductCategory
SELECT TOP 5 * FROM SalesLT.ProductModel
--b2: JOIN theo thứ tự trên

SELECT distinct 
    product.ProductModelID
    , product.name as pro_name
    ,  model.Name AS model_name
    ,   CASE 
            WHEN CHARINDEX('-', product.Name) = 0 THEN product.Name
            ELSE LEFT(product.Name, CHARINDEX('-', product.Name)- 1)
        END AS ProductName
    , cat.Name as cat_name 
    , SellStartDate
    , ListPrice
FROM SalesLT.SalesOrderDetail AS order_sale
LEFT JOIN SalesLT.Product AS product
    ON order_sale.ProductID = product.ProductID
LEFT JOIN SalesLT.ProductModel AS model 
    ON product.ProductModelID = model.ProductModelID
LEFT JOIN SalesLT.ProductCategory AS cat 
    ON product.ProductCategoryID = cat.ProductCategoryID
WHERE YEAR(SellStartDate) = 2006
    AND model.Name LIKE '%Road%'
    AND cat.Name LIKE '%Bikes%'
    AND CONVERT(INT,ListPrice) = 2243
-- answer: KHông có dòng dữ liệu nào thỏa yêu cầu

-- Way 2: subquery

SELECT TOP 5 * FROM SalesLT.Product
SELECT CASE 
    WHEN Name LIKE '% -%' THEN SUBSTRING(Name, 1, CHARINDEX(' -', Name))  
    ELSE Name 
    END AS ProductName 
    , ListPrice
    , SellStartDate
FROM SalesLT.Product -- Bảng chính để xử lý
WHERE YEAR(SellStartDate)  = 2006 
    AND ProductModelID IN  -- Product model name chứ 'Road'
        (SELECT ProductModelID
        FROM SalesLT.ProductModel 
        WHERE Name LIKE '%Road%') 
    AND ProductCategoryID IN -- cat name có chứa 'Bikes'
        (SELECT ProductCategoryID 
        FROM SalesLT.ProductCategory 
        WHERE Name LIKE '%Bikes%') 
    AND ProductID IN (SELECT DISTINCT ProductID FROM SalesLT.SalesOrderDetail) -- Chỉ lấy những poduct được đặt hàng
    AND LEFT(ListPrice, CHARINDEX('.', ListPrice)-1) = 2243 


/*TASK 3. Retrieve Sales data 
3.1 From dbo.DimProduct, dbo.DimPromotion, dbo.FactInternetSales,  
Write a query display ProductKey, EnglishProductName which has discount percentage >= 20%*/ 
-- 
SELECT
    inter.ProductKey
    , EnglishProductName
    , inter.PromotionKey
    , DiscountPct
FROM 
    dbo.FactInternetSales AS inter
JOIN dbo.DimProduct AS pro
ON inter.ProductKey = pro.ProductKey
JOIN dbo.DimPromotion AS promo
ON inter.PromotionKey = promo.PromotionKey
WHERE DiscountPct >= 0.2


-- rows: 13


/*3.2. From FactInternetSales and FactResellerSales, DimProduct  
Find all SalesOrderNumber  from 2 Fact tables which sales product that have Name contains 'Road' in name and Color is Yellow 
*Hint: Use UNION & JOIN  */

SELECT TOP 5 * FROM FactInternetSales
SELECT TOP 5 * FROM FactResellerSales
-- UNION 2 bảng trên thì có 31,455 SalesOrderNumber

-- Way 1: JOIN từng bảng để đặt điều kiện Road và Yellow rồi mới UNION 

SELECT 
    inte.ProductKey
    , SalesOrderNumber
    , Color 
    , EnglishProductName  
FROM FactInternetSales AS inte
JOIN dbo.DimProduct AS pro 
ON inte.ProductKey = pro.ProductKey
WHERE EnglishProductName LIKE '%Road%' AND Color LIKE 'Yellow'
UNION 
SELECT 
    res.ProductKey
    , SalesOrderNumber
    , Color 
    , EnglishProductName 
FROM FactResellerSales AS res 
JOIN dbo.DimProduct AS pro
ON res.ProductKey = pro.ProductKey
WHERE EnglishProductName LIKE '%Road%' AND Color = 'Yellow'


-- Cách làm của bạn trong lớp bị sai vì SQL sẽ thực hiện JOIN trước sau đó mới UNION nếu viết như bên dưới
SELECT DISTINCT SalesOrderNumber from FactInternetSales as FIS -- 27,659 rows 
UNION 
select DISTINCT SalesOrderNumber from FactResellerSales as FRS -- 894 rows , xử lý cái này trước 
left join Dimproduct as product 
    on FRS.ProductKey = product.ProductKey 
where EnglishProductName like '%Road%' 
    and color = 'Yellow'
-- 28,553 rows : chưa chính xác vì chỉ lọc dc các SalesOrderNumber chứa Road và yellow của bảng FactResellerSales

-- way 2: UNION 2 bảng xong rồi mới JOIN 

SELECT union_table.ProductKey
    , SalesOrderNumber
    , Color 
    , EnglishProductName  
FROM (
    SELECT DISTINCT SalesOrderNumber, ProductKey from FactInternetSales
    UNION 
    select DISTINCT SalesOrderNumber, ProductKey from FactResellerSales -- 121,253 rows
    ) AS union_table
LEFT JOIN Dimproduct as product 
    on union_table.ProductKey = product.ProductKey 
where EnglishProductName like '%Road%' 
    and color = 'Yellow'

-- 6,487 rows: đáp án đúng 


/*3.3 From DimCustomer and FactInternetSales, Display First Name, English Education of customer in FactInternetSale  
who have English Education is Bachelors or High School (2 ways: Subquery & JOIN) */

SELECT DISTINCT
    inte.CustomerKey
    , FirstName
    , EnglishEducation
FROM FactInternetSales AS inte 
LEFT JOIN DimCustomer AS cus 
ON inte.CustomerKey = cus.CustomerKey
WHERE EnglishEducation IN ('Bachelors', 'High School')
ORDER BY CustomerKey ASC

-- Subquery --
SELECT 
    CustomerKey
    , FirstName
    , EnglishEducation
FROM DimCustomer 
WHERE EnglishEducation IN ('Bachelors', 'High School')
    AND CustomerKey IN (SELECT CustomerKey FROM FactInternetSales ) 

/*3.4 From DimProduct, DimProductSubcategory and DimProductCategrory 
Write a query displaying the Product key, EnglishProductName, EnglishProductSubCategoryName , EnglishProductCategroyName 
and Color columns of product which has EnglishProductCategoryName is 'Clothing' */

SELECT
    ProductKey
    , EnglishProductName
    , EnglishProductSubCategoryName 
    , EnglishProductCategoryName
    , Color 
FROM DimProduct AS pro
FULL JOIN DimProductSubcategory AS sub
ON pro.ProductSubcategoryKey = sub.ProductSubcategoryKey
FULL JOIN DimProductCategory AS cat
ON cat.ProductCategoryKey = sub.ProductCategoryKey
WHERE EnglishProductCategoryName = 'Clothing'

--rows: 48